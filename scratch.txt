DB:

CREATE EXTENSION postgis;


CREATE TABLE schedules (
    id SERIAL PRIMARY KEY,
    street_name VARCHAR(255) NOT NULL,
    suburb_name VARCHAR(255) NOT NULL,
    side VARCHAR(255) NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    from_street_name VARCHAR(255),
    to_street_name VARCHAR(255),
    one_way BOOLEAN,
    week_1 BOOLEAN DEFAULT FALSE,
    week_2 BOOLEAN DEFAULT FALSE,
    week_3 BOOLEAN DEFAULT FALSE,
    week_4 BOOLEAN DEFAULT FALSE,
    week_5 BOOLEAN DEFAULT FALSE,
    sunday BOOLEAN DEFAULT FALSE,
    monday BOOLEAN DEFAULT FALSE,
    tuesday BOOLEAN DEFAULT FALSE,
    wednesday BOOLEAN DEFAULT FALSE,
    thursday BOOLEAN DEFAULT FALSE,
    friday BOOLEAN DEFAULT FALSE,
    saturday BOOLEAN DEFAULT FALSE,
    every_day BOOLEAN DEFAULT FALSE,
    year_round BOOLEAN DEFAULT FALSE,
    north_end_pilot BOOLEAN DEFAULT FALSE,
    has_duplicate BOOLEAN DEFAULT FALSE
);

CREATE TABLE sidewalks (
    id SERIAL PRIMARY KEY,
    schedule_id INTEGER REFERENCES schedules(id),
    geometry Geometry(LINESTRING),
    status VARCHAR(255) NOT NULL
);

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;


ALTER TABLE sidewalks
ADD COLUMN created_at TIMESTAMP DEFAULT NOW(),
ADD COLUMN updated_at TIMESTAMP DEFAULT NOW();


CREATE TABLE street_segments (
    id SERIAL PRIMARY KEY,
    street_id INTEGER,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL,
    suburb VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL,
    geometry Geometry(LINESTRING)
);

CREATE TABLE streets AS
SELECT
    street_id AS id,
    name,
    type,
    suburb,
    city,
    state,
    ST_LineMerge(ST_Union(geometry)) AS geometry
FROM
    street_segments
GROUP BY
    street_id, name, type, suburb, city, state;

ALTER TABLE streets
ADD CONSTRAINT streets_id_unique UNIQUE (id);

ALTER TABLE schedules
ADD COLUMN created_at TIMESTAMP DEFAULT NOW(),
ADD COLUMN updated_at TIMESTAMP DEFAULT NOW(),
ADD COLUMN street_id INTEGER REFERENCES streets(id),
ADD COLUMN from_street_id INTEGER REFERENCES streets(id),
ADD COLUMN to_street_id INTEGER REFERENCES streets(id);


ALTER TABLE schedules
DROP COLUMN street_id,
DROP COLUMN from_street_id,
DROP COLUMN to_street_id;



CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    hashed_password VARCHAR(255) NOT NULL,
    role VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_users_username ON users (username);

CREATE TABLE sidewalk_adjustments (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    sidewalk_id INTEGER REFERENCES sidewalks(id),
    schedule_id INTEGER REFERENCES schedules(id),
    status VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);


## getting the street that the schedules are for

WITH intersection_points AS (
    SELECT
        s.id AS schedule_id,
        ST_LineMerge(t_main.geometry) AS full_street_geometry,
        ST_Intersection(st_main.geometry, st_from.geometry) AS from_intersection,
        ST_Intersection(st_main.geometry, st_to.geometry) AS to_intersection
    FROM
        schedules s
    JOIN
        streets st_from ON s.from_street_id = st_from.id  -- Cross street for "from"
    JOIN
        streets st_to ON s.to_street_id = st_to.id        -- Cross street for "to"
    JOIN
        streets st_main ON s.street_id = st_main.id       -- Main street geometry
    WHERE
        ST_Intersects(st_main.geometry, st_from.geometry)  -- Ensure they intersect
        AND ST_Intersects(st_main.geometry, st_to.geometry)
    GROUP BY schedule_id, st_main.geometry, st_from.geometry, st_to.geometry
)

SELECT
    schedule_id,
    ST_LineSubstring(
        full_street_geometry,
        LEAST(ST_LineLocatePoint(full_street_geometry, from_intersection), ST_LineLocatePoint(full_street_geometry, to_intersection)),
        GREATEST(ST_LineLocatePoint(full_street_geometry, from_intersection), ST_LineLocatePoint(full_street_geometry, to_intersection))
    ) AS street_segment
FROM
    intersection_points;



SELECT
    s.id,
    ST_GeometryType(ST_Intersection(st_main.geometry, st_from.geometry)) AS from_geometry_type,
    ST_GeometryType(ST_Intersection(st_main.geometry, st_to.geometry)) AS to_geometry_type
FROM schedules s
JOIN
    streets st_from ON s.from_street_id = st_from.id  -- Cross street for "from"
JOIN
    streets st_to ON s.to_street_id = st_to.id        -- Cross street for "to"
JOIN
    streets st_main ON s.street_id = st_main.id     



-- Get the street segment between the from_street_id and to_street_id
SELECT
    s.id,
    st.id AS street_id,
    ST_LineSubstring(st.geometry,
        LEAST(ST_LineLocatePoint(st.geometry, f.geometry), ST_LineLocatePoint(st.geometry, t.geometry)),
        GREATEST(ST_LineLocatePoint(st.geometry, f.geometry), ST_LineLocatePoint(st.geometry, t.geometry))
    ) AS segment_geometry
FROM
    schedules s
JOIN
    street_segments st ON s.street_id = st.street_id
JOIN
    street_segments f ON s.from_street_id = f.street_id -- Assuming from_street_id references street_segments
JOIN
    street_segments t ON s.to_street_id = t.street_id   -- Assuming to_street_id references street_segments
WHERE
    st.id = s.street_id;



SELECT
    s.id,
    st.id AS street_id,
    ST_LineSubstring(
        CASE
            WHEN ST_GeometryType(st.geometry) = 'ST_MultiLineString' THEN ST_GeometryN(st.geometry, 1)
            ELSE st.geometry
        END,
        LEAST(ST_LineLocatePoint(
            CASE
                WHEN ST_GeometryType(st.geometry) = 'ST_MultiLineString' THEN ST_GeometryN(st.geometry, 1)
                ELSE st.geometry
            END, f.geometry),
        ST_LineLocatePoint(
            CASE
                WHEN ST_GeometryType(st.geometry) = 'ST_MultiLineString' THEN ST_GeometryN(st.geometry, 1)
                ELSE st.geometry
            END, t.geometry)),
        GREATEST(ST_LineLocatePoint(
            CASE
                WHEN ST_GeometryType(st.geometry) = 'ST_MultiLineString' THEN ST_GeometryN(st.geometry, 1)
                ELSE st.geometry
            END, f.geometry),
        ST_LineLocatePoint(
            CASE
                WHEN ST_GeometryType(st.geometry) = 'ST_MultiLineString' THEN ST_GeometryN(st.geometry, 1)
                ELSE st.geometry
            END, t.geometry))
    ) AS segment_geometry
FROM
    schedules s
JOIN
    streets st ON s.street_id = st.id
JOIN
    streets f ON s.from_street_id = f.id -- Assuming from_street_id references street_segments
JOIN
    streets t ON s.to_street_id = t.id   -- Assuming to_street_id references street_segments
WHERE
    st.id = s.street_id;


WITH schedule_street_segments AS (
    WITH intersection_points AS (
        SELECT
            s.id AS schedule_id,
            st_full.geometry AS full_street_geometry,
            st_main.geometry AS st_main_segment,
            ST_Intersection(st_main.geometry, st_from.geometry) AS from_intersection,
            ST_Intersection(st_main.geometry, st_to.geometry) AS to_intersection
        FROM
            schedules s
        JOIN
            street_segments st_from ON s.from_street_id = st_from.street_id  -- Cross street for "from"
        JOIN
            street_segments st_to ON s.to_street_id = st_to.street_id        -- Cross street for "to"
        JOIN
            street_segments st_main ON s.street_id = st_main.street_id       -- Main street geometry
        JOIN
            streets st_full ON s.street_id = st_full.id
        WHERE
            ST_Intersects(st_main.geometry, st_from.geometry)
            AND ST_Intersects(st_main.geometry, st_to.geometry)
            AND ST_GeometryType(ST_Intersection(st_main.geometry, st_from.geometry)) = 'ST_Point'
            AND ST_GeometryType(ST_Intersection(st_main.geometry, st_to.geometry)) = 'ST_Point'
        GROUP BY schedule_id, st_main.geometry, st_from.geometry, st_to.geometry, st_full.geometry
    )

    SELECT
        schedule_id,
        ST_LineSubstring(
            full_street_geometry,
            LEAST(ST_LineLocatePoint(st_main_segment, from_intersection), ST_LineLocatePoint(st_main_segment, to_intersection)),
            GREATEST(ST_LineLocatePoint(st_main_segment, from_intersection), ST_LineLocatePoint(st_main_segment, to_intersection))
        ) AS street_segment
    FROM
        intersection_points
)

SELECT DISTINCT ST_GeometryType(street_segment) FROM schedule_street_segments;




WITH schedule_street_segments AS(
    WITH intersection_points AS (
        SELECT
            s.id AS schedule_id,
            st_full.geometry AS full_street_geometry,
            st_main.geometry AS st_main_segment,
            ST_Intersection(st_main.geometry, st_from.geometry) AS from_intersection,
            ST_Intersection(st_main.geometry, st_to.geometry) AS to_intersection
        FROM
            schedules s
        JOIN
            street_segments st_from ON s.from_street_id = st_from.street_id  -- Cross street for "from"
        JOIN
            street_segments st_to ON s.to_street_id = st_to.street_id        -- Cross street for "to"
        JOIN
            street_segments st_main ON s.street_id = st_main.street_id       -- Main street geometry
        JOIN
            streets st_full ON s.street_id = st_full.id
        WHERE
            ST_Intersects(st_main.geometry, st_from.geometry)
            AND ST_Intersects(st_main.geometry, st_to.geometry)
            AND ST_GeometryType(ST_Intersection(st_main.geometry, st_from.geometry)) = 'ST_Point'
            AND ST_GeometryType(ST_Intersection(st_main.geometry, st_to.geometry)) = 'ST_Point'
        GROUP BY schedule_id, st_main.geometry, st_from.geometry, st_to.geometry, st_full.geometry
    )

    SELECT
        schedule_id,
        ST_LineSubstring(
            full_street_geometry,
            LEAST(ST_LineLocatePoint(st_main_segment, from_intersection), ST_LineLocatePoint(st_main_segment, to_intersection)),
            GREATEST(ST_LineLocatePoint(st_main_segment, from_intersection), ST_LineLocatePoint(st_main_segment, to_intersection))
        ) as street_segment
    FROM
        intersection_points
    GROUP BY
        schedule_id;
) SELECT DISTINCT ST_GeometryType(street_segment) from schedule_street_segments;





# calculate next sweep


(WITH RECURSIVE next_sweep_day AS (
    -- Generate a series of the next days starting from today for up to 6 weeks
    SELECT
        CURRENT_DATE::timestamp AS day
    UNION ALL
    SELECT
        day + INTERVAL '1 day'
    FROM next_sweep_day
    WHERE day < CURRENT_DATE::timestamp + INTERVAL '60 days' -- Max lookahead of 6 weeks
),
next_sweep_schedule AS (
    SELECT
        s.id,
        s.start_time,
        s.end_time,
        CASE
            WHEN s.every_day THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 0 AND s.sunday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 1 AND s.monday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 2 AND s.tuesday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 3 AND s.wednesday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 4 AND s.thursday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 5 AND s.friday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 6 AND s.saturday THEN TRUE
            ELSE FALSE
        END AS valid_day,
        CASE
            WHEN s.every_day THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 1 AND s.week_1 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 2 AND s.week_2 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 3 AND s.week_3 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 4 AND s.week_4 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 5 AND s.week_5 THEN TRUE
            ELSE FALSE
        END AS valid_week,
        nsd.day
    FROM
        schedules s
    CROSS JOIN
        next_sweep_day nsd
)
-- Select the next valid sweep date for each schedule
SELECT DISTINCT ON (s.id)
    s.id,
    nsd.day + s.start_time::interval AS next_sweep_time  -- Cast start_time to interval
FROM
    next_sweep_schedule nsd
JOIN
    schedules s ON s.id = nsd.id
WHERE
    nsd.valid_day = TRUE
    AND nsd.valid_week = TRUE
ORDER BY
    s.id,   -- Ensure the DISTINCT ON works per schedule
    nsd.day ASC) as next_sweeps;





WITH RECURSIVE next_sweep_day AS (
    -- Generate a series of the next days starting from today for up to 6 weeks
    SELECT
        CURRENT_DATE::timestamp AS day
    UNION ALL
    SELECT
        day + INTERVAL '1 day'
    FROM next_sweep_day
    WHERE day < CURRENT_DATE::timestamp + INTERVAL '60 days' -- Max lookahead of 6 weeks
),
next_sweep_schedule AS (
    SELECT
        s.id,
        s.start_time,
        s.end_time,
        CASE
            WHEN s.every_day THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 0 AND s.sunday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 1 AND s.monday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 2 AND s.tuesday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 3 AND s.wednesday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 4 AND s.thursday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 5 AND s.friday THEN TRUE
            WHEN EXTRACT(DOW FROM nsd.day) = 6 AND s.saturday THEN TRUE
            ELSE FALSE
        END AS valid_day,
        CASE
            WHEN s.every_day THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 1 AND s.week_1 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 2 AND s.week_2 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 3 AND s.week_3 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 4 AND s.week_4 THEN TRUE
            WHEN to_char(current_date, 'W')::integer = 5 AND s.week_5 THEN TRUE
            ELSE FALSE
        END AS valid_week,
        nsd.day
    FROM
        schedules s
    CROSS JOIN
        next_sweep_day nsd
),
next_sweep_times AS (
    SELECT DISTINCT ON (s.id)
        s.id,
        nsd.day + s.start_time::interval AS next_sweep_time  -- Cast start_time to interval
    FROM
        next_sweep_schedule nsd
    JOIN
        schedules s ON s.id = nsd.id
    WHERE
        nsd.valid_day = TRUE
        AND nsd.valid_week = TRUE
    ORDER BY
        s.id,   -- Ensure the DISTINCT ON works per schedule
        nsd.day ASC
),
tile_bounds_cte AS (
    SELECT
        ST_TileEnvelope(18, 79322, 96974) AS geom_3857,
        ST_Transform(ST_TileEnvelope(18, 79322, 96974), 4326) AS geom_4326
),
mvt_table_cte AS (
    SELECT
        ST_AsMVTGeom(
            ST_Transform(sidewalks.geometry, 3857), 
            tile_bounds_cte.geom_3857
        ) AS geom,
        sidewalks.id,
        sidewalks.schedule_id,
        sidewalks.status,
        schedules.street_name,
        schedules.suburb_name,
        schedules.side,
        schedules.start_time,
        schedules.end_time,
        schedules.from_street_name,
        schedules.to_street_name,
        schedules.has_duplicates,
        schedules.one_way,
        schedules.week_1,
        schedules.week_2,
        schedules.week_3,
        schedules.week_4,
        schedules.week_5,
        schedules.sunday,
        schedules.monday,
        schedules.tuesday,
        schedules.wednesday,
        schedules.thursday,
        schedules.friday,
        schedules.saturday,
        schedules.every_day,
        schedules.year_round,
        schedules.north_end_pilot
    FROM
        sidewalks
    JOIN
        tile_bounds_cte ON TRUE
    LEFT JOIN
        schedules ON sidewalks.schedule_id = schedules.id
    LEFT JOIN
        next_sweep_times ON schedules.id = next_sweep_times.id
    WHERE
        ST_Intersects(sidewalks.geometry, tile_bounds_cte.geom_4326)
)
SELECT 
    ST_AsMVT(mvt_table_cte.*, 'default', 4096, 'geom', 'id') 
FROM 
    mvt_table_cte;





INSERT INTO sidewalks VALUES (2, 1, (SELECT ST_AsText(ST_GeomFromGeoJSON('{"type": "LineString", "coordinates": [[-71.03264793252747,42.37402773004487],[-71.03250568142722, 42.374030198610946],[-71.03234379935947,42.37403727410114],[-71.03205536068562,42.37406141276441],[-71.03181938296595,42.37408670052884],[-71.03177104521468,42.374097842930205]]}'))));



# Define your coordinates and radius
longitude = -71.03264793252747
latitude = 42.37402773004487
radius = 500  # radius in meters

query = text("""
    SELECT id, schedule_id, ST_AsGeoJSON(geometry) AS geojson
    FROM sidewalks
    WHERE ST_DWithin(
        geometry,
        ST_SetSRID(ST_MakePoint(:longitude, :latitude), 4326),
        :radius
    );
""")

with engine.connect() as connection:
    result = connection.execute(query, {'longitude': longitude, 'latitude': latitude, 'radius': radius})
    sidewalks = result.fetchall()



Running Nominatim:

docker run -it \
  -e PBF_URL=https://download.geofabrik.de/north-america/us/massachusetts-latest.osm.pbf \
  -e REPLICATION_URL=https://download.geofabrik.de/north-america-updates/ \
  -p 8080:8080 \
  --name nominatim \
  mediagis/nominatim:4.4